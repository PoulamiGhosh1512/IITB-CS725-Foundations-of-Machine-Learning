{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO4hUOTFqA69/P3nepyaJ+T"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from math import *\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"metadata":{"id":"_McmgROb4kcs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#MOUNT DRIVE TO COLAB\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","train_df = pd.read_csv('/content/drive/My Drive/CS725 Programming Assignment/classification/data/train.csv')\n","test_df = pd.read_csv('/content/drive/My Drive/CS725 Programming Assignment/classification/data/test.csv')\n","dev_df = pd.read_csv('/content/drive/My Drive/CS725 Programming Assignment/classification/data/dev.csv')\n","\n","#Handling of categorical variable\n","replace_map = {'1': {'Old': 0, 'New': 1, 'Very Old': 2, 'Recent': 3}}\n","\n","#Creating copies of original dataframe with categorical columns replaced with numbers\n","train_df_copy = train_df.replace(replace_map)\n","dev_df_copy = dev_df.replace(replace_map)\n","\n","train_input = train_df_copy.iloc[:, 1::]\n","train_target = train_df_copy['1']\n","dev_input = dev_df_copy.iloc[:, 1::]\n","dev_target = dev_df_copy['1']\n","test_input = test_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GZf5Rf1MYA3G","executionInfo":{"status":"ok","timestamp":1667031012551,"user_tz":-330,"elapsed":3417,"user":{"displayName":"Poulami Ghosh","userId":"09008978316233552356"}},"outputId":"84601f04-60c2-4f3f-8643-ce937ad14839"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["def min_max_scaler(x):\n","\tx_min = np.min(x, axis=0)\n","\tx_max = np.max(x,axis=0)\n","\tx = np.divide((x - x_min), (x_max - x_min))\n","\treturn x\n","\n","def standardisation(x):\n","\tx_mean = np.mean(x, axis=0)\n","\tx_std = np.std(x,axis=0)\n","\tx = np.divide((x - x_mean), x_std)\n","\treturn x\n","\n","train_input_arr = np.array(train_input)\n","train_target_arr = np.array(train_target)\n","dev_input_arr = np.array(dev_input)\n","dev_target_arr = np.array(dev_target)\n","test_input_arr = np.array(test_input)"],"metadata":{"id":"TZp0wRh2tzmv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def relu(h):\n","  return np.maximum(0,h)\n","\n","def softmax(h):\n","  exp_h = np.exp(h)\n","  prob = exp_h / np.sum(exp_h, axis=1, keepdims=True)\n","  return prob\n","\n","def d_softmax(pred_probs,target):\n","  batch_size = len(pred_probs)\n","  d = pred_probs.copy()\n","  d[range(batch_size),target] -= 1\n","  d /= batch_size\n","  return d\n","\n","def cross_entropy_loss(pred_probs,target):\n","  batch_size = len(pred_probs)\n","  log_probs = -np.log(pred_probs[range(batch_size),target])\n","  loss = np.sum(log_probs)/batch_size\n","  return loss\n","\n","def loss_regularization(lamda,weights):\n","  reg_loss = 0\n","  for w in weights:\n","    reg_loss = 0.5*lamda*np.sum(w*w)\n","  return reg_loss\n","\n","def loss_fn(pred_probs, target, weights, lamda):\n","    return cross_entropy_loss(pred_probs,target) + loss_regularization(lamda,weights)\n","\n","def accuracy(pred,target):\n","  predicted_class = np.argmax(pred , axis=1)\n","  return np.mean(predicted_class == target)"],"metadata":{"id":"B7ODavRD7x0M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Net(object):\n","  def __init__(self, layer_dims ):\n","    self.layer_dims = layer_dims\n","    self.num_layers = len(layer_dims)\n","\n","    self.h_states = []\n","    self.a_states = []\n","\n","    self.weights = [np.random.uniform(-1,1,size=(x, y)) for x, y in zip(layer_dims[:-1], layer_dims[1:])]\n","    self.biases = [np.random.uniform(-0.,1,size=(1, y)) for y in layer_dims[1:]]\n","\n","  def __call__(self, X):\n","    out = X\n","    self.a_states.append(X)\n","    for i in range(self.num_layers - 1):\n","        h = np.dot(out, self.weights[i]) + self.biases[i]\n","        if i != self.num_layers - 2:\n","          out = relu(h)\n","        else:\n","          out = softmax(h)\n","        self.h_states.append(h)\n","        self.a_states.append(out)\n","    return out\n","\n","  def backward(self, X, y, y_hat,lamda):\n","      dW = [np.zeros(w.shape) for w in self.weights]\n","      db = [np.zeros(b.shape) for b in self.biases]\n","\n","      derivative = d_softmax(y_hat,y) #self.a_states[-1] is y_hat\n","      dW[-1] = np.dot(self.a_states[-2].T, derivative)\n","      db[-1] = np.sum(derivative, axis=0, keepdims=True)\n","\n","      for j in range(2,self.num_layers):\n","        derivative = np.dot(derivative, self.weights[-j + 1].T)\n","        derivative[self.a_states[-j] <= 0] = 0 #Effect of ReLU\n","\n","        dW[-j] = np.dot(self.a_states[-j - 1].T, derivative)\n","        db[-j] = np.sum(derivative, axis=0, keepdims=True)\n","\n","      for i in range(len(self.weights)):\n","        dW[i] = dW[i] + lamda * self.weights[i]\n","\n","      return dW, db"],"metadata":{"id":"9EhvPd7p5gep"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Optimizer(object):\n","  def __init__(self, learning_rate):\n","    self.learning_rate = learning_rate\n","\n","  def step(self, weights, biases, delta_weights, delta_biases):\n","    for i in range(len(weights)):\n","      weights[i] = weights[i] - self.learning_rate * delta_weights[i]\n","    for i in range(len(biases)):\n","      biases[i] = biases[i] - self.learning_rate * delta_biases[i]\n","    return weights, biases"],"metadata":{"id":"Xrd_Hxj4EDI8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train(net, optimizer, lamda, batch_size, max_epochs,train_input, train_target, dev_input, dev_target):\n","  m = train_input.shape[0]\n","  num_batches = m/batch_size\n","\n","  train_loss_list = []\n","  dev_loss_list = []\n","\n","  for e in range(max_epochs):\n","    epoch_loss = 0.\n","    for i in range(0, m, batch_size):\n","      batch_input = train_input[i:i+batch_size]\n","      batch_target = train_target[i:i+batch_size]\n","\n","      index = list(range\n","      pred = net(batch_input)\n","\n","      # Compute gradients of loss w.r.t. weights and biases\n","      dW, db = net.backward(batch_input, batch_target, pred, lamda)\n","\n","      # Get updated weights based on current weights and gradients\n","      weights_updated, biases_updated = optimizer.step(net.weights, net.biases, dW, db)\n","\n","      # Update model's weights and biases\n","      net.weights = weights_updated\n","      net.biases = biases_updated\n","\n","      # Compute loss for the batch\n","      #batch_loss = cross_entropy_loss(pred,batch_target)\n","      batch_loss = loss_fn(pred ,batch_target, net.weights, lamda)\n","      epoch_loss += batch_loss\n","\n","      #print('Batch', i, batch_loss)\n","\n","    #Calculations on Dev set\n","    dev_pred = net(dev_input)\n","    dev_loss = loss_fn(dev_pred ,dev_target, net.weights, lamda)\n","    dev_accuracy = accuracy(dev_pred, dev_target)\n","\n","    train_loss_list.append(epoch_loss/num_batches)\n","    dev_loss_list.append(dev_loss)\n","\n","    if (e%10 == 0):\n","      print('Epoch', e, '::Train loss:', epoch_loss/num_batches, ',Dev Loss:', dev_loss)\n","\n","      print('Accuracy on dev data: {:.5f}'.format(dev_accuracy))\n","      print('')\n","\n","  train_pred = net(train_input)\n","  train_accuracy = accuracy(train_pred, train_target)\n","  print('--------------------------------------')\n","  print('Accuracy on train data: {:.5f}'.format(train_accuracy))\n","\n","  dev_pred = net(dev_input)\n","  dev_accuracy = accuracy(dev_pred, dev_target)\n","\n","  print('Accuracy on dev data: {:.5f}'.format(dev_accuracy))\n","\n","  e = list(range(max_epochs))\n","  plt.figure(dpi=100)\n","  plt.title('Training set vs Validation set loss')\n","  plt.plot(e,train_loss_list,color='r',label='Training set loss',linewidth=2)\n","  plt.plot(e,dev_loss_list,color='b',label='Validation set loss',linewidth=2)\n","  plt.legend()\n","  plt.show()"],"metadata":{"id":"GZGcdsZySLL_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_test_data_predictions(net, inputs):\n","  pred = net(inputs)\n","  predicted_class = np.argmax(pred , axis=1)\n","  return predicted_class"],"metadata":{"id":"A7jrBIHoXEIT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def centered_data(dataset,mu):\n","  data_matrix_centered = dataset.copy()\n","  for i in range(90):\n","    data_matrix_centered[i] = data_matrix_centered[i]- mu[i]\n","  return data_matrix_centered\n","\n","def compute_explained_variance(eig_vals):\n","    c_sum = np.cumsum(eig_vals) #Cumulative sum of the eigenvalues\n","    explained_variance = c_sum/np.sum(eig_vals) #Normalization\n","    return explained_variance\n","\n","def pca_dataset(dataset,eig_val,eig_vec,no_of_components):\n","  # sorting in decreasing order\n","  i = np.argsort(eig_val)[::-1]\n","  eig_vec_desc = eig_vec[:,i]\n","\n","  # selecting the principal eigenvectors after sorting\n","  principal_eig_vec = eig_vec_desc[:, :no_of_components]\n","\n","  pca_dataset = np.matmul(np.transpose(principal_eig_vec),dataset)\n","  return pca_dataset"],"metadata":{"id":"rqLO1mKY0T5q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Data matrix for train, dev and test datasets where each column corresponds to an example\n","data_matrix_train = train_input_arr.T\n","data_matrix_dev = dev_input_arr.T\n","data_matrix_test = test_input_arr.T\n","\n","#Computing mean\n","mu_train = np.mean(data_matrix_train,axis=1)\n","mu_dev = np.mean(data_matrix_dev,axis=1)\n","mu_test = np.mean(data_matrix_test,axis=1)\n","\n","#Sample size\n","sample_size_train = data_matrix_train.shape[1]\n","sample_size_dev = data_matrix_dev.shape[1]\n","sample_size_test = data_matrix_test.shape[1]\n","\n","#Centering the data\n","data_matrix_train_centered = centered_data(data_matrix_train,mu_train)\n","data_matrix_dev_centered = centered_data(data_matrix_dev,mu_dev)\n","data_matrix_test_centered = centered_data(data_matrix_test,mu_test)\n","\n","#Computing covariance\n","covariance_train = (np.matmul(data_matrix_train_centered,np.transpose(data_matrix_train_centered)))/(sample_size_train-1)\n","covariance_dev = (np.matmul(data_matrix_dev_centered,np.transpose(data_matrix_dev_centered)))/(sample_size_dev-1)\n","covariance_test = (np.matmul(data_matrix_test_centered,np.transpose(data_matrix_test_centered)))/(sample_size_test-1)\n","\n","#Computing eigenvalues and eigenvectors\n","eig_val_train, eig_vec_train = np.linalg.eigh(covariance_train)\n","eig_val_dev, eig_vec_dev = np.linalg.eigh(covariance_dev)\n","eig_val_test, eig_vec_test = np.linalg.eigh(covariance_test)"],"metadata":{"id":"JSwsiD9V52hD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Plot of eigenvalues\n","f = plt.figure()\n","f.set_figwidth(20)\n","f.set_figheight(5)\n","\n","plt.subplot(1,3,1)\n","eig_val_train_desc = eig_val_train[::-1]\n","plt.plot(range(1,91,1),eig_val_train_desc,color='blue', marker='o',linestyle='dashed')\n","plt.xlabel('Component Number')\n","plt.ylabel('Eigenvalue')\n","plt.title('Train')\n","plt.subplot(1,3,2)\n","eig_val_dev_desc = eig_val_dev[::-1]\n","plt.plot(range(1,91,1),eig_val_dev_desc,color='blue', marker='o',linestyle='dashed')\n","plt.xlabel('Component Number')\n","plt.ylabel('Eigenvalue')\n","plt.title('Dev')\n","plt.subplot(1,3,3)\n","eig_val_test_desc = eig_val_test[::-1]\n","plt.plot(range(1,91,1),eig_val_test_desc,color='blue', marker='o',linestyle='dashed')\n","plt.xlabel('Component Number')\n","plt.ylabel('Eigenvalue')\n","plt.title('Test')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"id":"7kFEOSWI54iM","executionInfo":{"status":"ok","timestamp":1667031013620,"user_tz":-330,"elapsed":17,"user":{"displayName":"Poulami Ghosh","userId":"09008978316233552356"}},"outputId":"545ee471-9028-46c7-a427-322dfad8bfe1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x360 with 3 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Explained Variance v/s No. of components\n","explained_var_train = compute_explained_variance(eig_val_train_desc)\n","explained_var_dev = compute_explained_variance(eig_val_dev_desc)\n","explained_var_test = compute_explained_variance(eig_val_test_desc)\n","\n","f = plt.figure()\n","f.set_figwidth(20)\n","f.set_figheight(5)\n","\n","plt.subplot(1,3,1)\n","plt.plot(range(1,91),explained_var_train,)\n","plt.title('Train')\n","plt.ylabel('Explained Variance')\n","plt.xlabel('Number of components')\n","plt.grid()\n","plt.subplot(1,3,2)\n","plt.plot(range(1,91),explained_var_dev)\n","plt.title('Dev')\n","plt.ylabel('Explained Variance')\n","plt.xlabel('Number of components')\n","plt.grid()\n","plt.subplot(1,3,3)\n","plt.plot(range(1,91),explained_var_test)\n","plt.title('Test')\n","plt.ylabel('Explained Variance')\n","plt.xlabel('Number of components')\n","plt.grid()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"id":"MI-J530q57Is","executionInfo":{"status":"ok","timestamp":1667031014299,"user_tz":-330,"elapsed":692,"user":{"displayName":"Poulami Ghosh","userId":"09008978316233552356"}},"outputId":"e939651d-be9c-4854-83bd-7df323b7e05f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x360 with 3 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["pca_train_dataset = pca_dataset(data_matrix_train_centered,eig_val_train,eig_vec_train,20)\n","pca_dev_dataset = pca_dataset(data_matrix_dev_centered,eig_val_dev,eig_vec_dev,20)\n","pca_test_dataset = pca_dataset(data_matrix_test_centered,eig_val_test,eig_vec_test,20)"],"metadata":{"id":"vrd0jeO86Bko"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["max_epochs = 100\n","batch_size = 32\n","learning_rate = 0.1\n","layer_dims = [20,8,4]\n","lamda = 0.00001\n","\n","#train_input, train_target, dev_input, dev_target, test_input = train_input_arr, train_target_arr, dev_input_arr, dev_target_arr, test_input_arr\n","train_input, train_target = pca_train_dataset.T, train_target_arr\n","dev_input, dev_target, test_input = pca_dev_dataset.T, dev_target_arr, standardisation(pca_test_dataset.T)\n","net = Net(layer_dims)\n","optimizer = Optimizer(learning_rate)\n","train(net, optimizer, lamda, batch_size, max_epochs,train_input, train_target,dev_input, dev_target)\n","test_pred = get_test_data_predictions(net, test_input)"],"metadata":{"id":"yyCIK4hW6GTu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pred = pd.DataFrame(test_pred)\n","\n","replace_map1 = {0 : 'Old', 1 : 'New', 2 : 'Very Old', 3 : 'Recent'}\n","\n","result = pred.replace(replace_map1)"],"metadata":{"id":"zVVtbmaj7Dmm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["result"],"metadata":{"id":"odfMo4iGAGWs","executionInfo":{"status":"ok","timestamp":1667031034151,"user_tz":-330,"elapsed":12,"user":{"displayName":"Poulami Ghosh","userId":"09008978316233552356"}},"colab":{"base_uri":"https://localhost:8080/","height":424},"outputId":"f9eb8c48-67ba-41a7-994a-e4da9c316520"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             0\n","0          New\n","1       Recent\n","2       Recent\n","3     Very Old\n","4     Very Old\n","...        ...\n","5095  Very Old\n","5096  Very Old\n","5097  Very Old\n","5098  Very Old\n","5099  Very Old\n","\n","[5100 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-11d8b234-4f98-44bd-b7b8-f81a12df7786\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>New</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Recent</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Recent</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Very Old</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Very Old</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5095</th>\n","      <td>Very Old</td>\n","    </tr>\n","    <tr>\n","      <th>5096</th>\n","      <td>Very Old</td>\n","    </tr>\n","    <tr>\n","      <th>5097</th>\n","      <td>Very Old</td>\n","    </tr>\n","    <tr>\n","      <th>5098</th>\n","      <td>Very Old</td>\n","    </tr>\n","    <tr>\n","      <th>5099</th>\n","      <td>Very Old</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5100 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11d8b234-4f98-44bd-b7b8-f81a12df7786')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-11d8b234-4f98-44bd-b7b8-f81a12df7786 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-11d8b234-4f98-44bd-b7b8-f81a12df7786');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":142}]},{"cell_type":"code","source":[],"metadata":{"id":"zGJgEtLrXGon"},"execution_count":null,"outputs":[]}]}